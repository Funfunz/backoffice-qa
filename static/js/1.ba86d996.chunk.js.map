{"version":3,"sources":["components/Field/Wrapper/style.module.scss","components/Field/Toggle/style.module.scss","hooks/useEntity.ts","services/entry.ts","components/Field/Wrapper/index.tsx","components/Field/Datetime/index.tsx","components/Field/Input/index.tsx","components/Field/Select/index.tsx","components/Field/File/RenderFile.tsx","components/Field/File/index.tsx","components/Field/RelationSelect/index.tsx","components/Field/Toggle/index.tsx","utils/fields.ts","components/Field/Input/style.module.scss","components/Field/File/style.module.scss","services/entries.ts","hooks/useEntries.ts","services/entity.ts","utils/index.ts"],"names":["module","exports","useEntity","entityName","useForceUpdate","useEffect","Entity","getEntity","isLoading","isError","shouldFetchEntity","fetchEntity","then","runForceUpdate","undefined","getEntryData","entity","filter","fields","a","Promise","all","getMnRelations","get1nRelations","map","relationEntities","getProperties","getName","payload","resolve","query","operation","length","Object","keys","args","forEach","key","_eq","graphql","data","entry","getPk","saveEntryData","mutation","toUpperCase","substr","reduce","res","Array","isArray","filterMatch","result","entryEquals","entryDiff","newEntry","tmp","i","Math","max","FieldWrapper","name","label","children","className","classes","fieldContainer","htmlFor","field","memo","DatetimeField","type","value","onChange","readOnly","dateFormat","timeFormat","placeholder","handleChange","useCallback","Date","toISOString","substring","open","inputProps","classNames","input","InputField","event","target","Number","id","SelectField","options","onSearch","isMulti","selected","s","handleSearch","newValue","actionMeta","onInputChange","o","includes","find","isDisabled","RenderFile","url","fileType","split","pop","toLowerCase","getFileTypeFromUrl","style","renderImage","alt","src","FileField","files","RelationSelectField","props","useState","search","setSearch","relationEntityName","entries","useEntries","view","pk","labelKey","getPropertyToBeUsedAsLabel","_in","selectedEntries","request","take","mergedEntries","item","index","array","findIndex","arrayItem","Select","checked","handleToggle","toggleField","onClick","toggleIndicator","mapFieldComponents","propertyName","getPropertyLabel","isPropertyReadOnly","getPropertyEditFieldType","getPropertyRelationType","getPropertyModelType","getPropertyEditField","Component","ToggleField","console","log","relationType","getPropertyRelationEntityName","parseFilter","_like","countEntries","getEntries","skip","setEntries","total","setTotal","loading","setLoading","error","setError","oldArgs","setNewArgs","fetchEntries","catch","deleteEntry","deleteEntries","hasNewArgs","reload","this","properties","p","isPk","backoffice","visible","relation","detail","entityPage","relations","remoteEntity","getPropertyByName","property","foreignKey","getPropertyRelation","editField","letter","friendlyName","errors","entities","config","Error"],"mappings":"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","file":"static/js/1.ba86d996.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldContainer\":\"style_fieldContainer__kOYHM\",\"label\":\"style_label__1Gb-6\",\"field\":\"style_field__2HVUU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleField\":\"style_toggleField__2lQQh\",\"toggleIndicator\":\"style_toggleIndicator__3-TNJ\"};","import { useEffect } from 'react'\nimport { runForceUpdate, useForceUpdate } from 'react-forceupdate'\nimport Entity from '../services/entity'\n\nfunction shouldFetchEntity(entityName?: string) {\n  return entityName &&\n    !Entity.getEntity(entityName) && \n    !Entity.isLoading(entityName) && \n    !Entity.isError(entityName)\n}\n\n/* Get entity config by entity name */\nexport function useEntity(entityName?: string): Entity | undefined {\n\n  useForceUpdate(`entities/${entityName}`)\n\n  useEffect(() => { \n    if (shouldFetchEntity(entityName)) {\n      Entity.fetchEntity(entityName as string).then(() => {\n        runForceUpdate(`entities/${entityName}`)\n      })\n    } \n  }, [entityName])\n\n  return entityName ? Entity.getEntity(entityName) : undefined\n}","import Entity from './entity'\nimport graphql, { IFields, IGQuery } from './graphql'\n\nexport interface IFilter {\n  [key: string]: string | number | boolean | IFilter | undefined\n}\nexport interface IEntryData {\n  [key: string]: string | number | boolean | undefined | IEntryData\n}\n\nexport async function getEntryData(entity: Entity, filter?: IFilter, fields?: IFields): Promise<IEntryData> {\n  const relationEntities = await Promise.all([\n    ...entity.getMnRelations(),\n    ...entity.get1nRelations(),\n  ].map((entityName) => {\n    return Entity.fetchEntity(entityName)\n  }))\n  fields = fields || [\n    ...entity.getProperties('edit'), \n    ...relationEntities.map((entity) => ({\n      [entity.getName()]: entity.getProperties('relation') as string[],\n    })),\n  ]\n  if (!filter) {\n    const payload = {}\n    return Promise.resolve(payload)\n  }\n  const query: IGQuery = {\n    operation: entity.getName(),\n    fields: fields.length ? fields : Object.keys(filter),\n    args: {\n      filter: {},\n    },\n  }\n  Object.keys(filter).forEach((key) => {\n    (query.args as any).filter[key] = {\n      _eq: filter[key],\n    }\n  })\n  return graphql.query(query).then((data: any) => {\n    if (data) {\n      return data && data[0]\n    }\n  }).then((data) => {\n    relationEntities.forEach((entity) => {\n      data[entity.getName()] = data[entity.getName()].map((entry: Record<string, number | string>) => {\n        return entry[entity.getPk()]\n      })\n    })\n    return data\n  })\n}\n\nexport async function saveEntryData(entity: Entity, data: any, filter?: IFilter): Promise<void> {\n  if (!data || !Object.keys(data).length) {\n    return Promise.resolve()\n  }\n  const entityName = entity.getName()\n  const relationEntities = await Promise.all(entity.getMnRelations().map((entityName) => {\n    return Entity.fetchEntity(entityName)\n  }))\n  const fields = [\n    ...entity.getProperties('edit'), \n    ...relationEntities.map((entity) => ({\n      [entity.getName()]: entity.getProperties('relation') as string[],\n    })),\n  ]\n  const mutation: IGQuery = {\n    operation: entityName[0].toUpperCase() + entityName.substr(1),\n    args: {\n      data,\n    },\n    fields,\n  }\n  \n  if (filter && mutation.args) {\n    mutation.operation = 'update' + mutation.operation\n    mutation.args.filter = Object.keys(filter).reduce((res, key) => ({\n      ...res,\n      [key]: {\n        _eq: filter[key],\n      },\n    }), {})\n    if (mutation.fields?.length) {\n      mutation.fields = Object.keys(filter)\n    }\n  } else {\n    mutation.operation = 'add' + mutation.operation\n  }\n  return graphql.mutation(mutation).then(\n    (data) => {\n      const payload = Array.isArray(data)\n        ? data[0]\n        : data\n      return payload\n    },\n  )\n}\n\nexport function filterMatch(entry: any, filter?: IFilter) {\n  if (entry === undefined && filter === undefined) {\n    return true\n  }\n  if (!filter && entry && !Object.keys(entry).length) {\n    return true\n  }\n  return entry && filter && Object.keys(filter).reduce(\n    (result, key) => {\n      // eslint-disable-next-line eqeqeq\n      return result && entry[key] == filter[key]\n    },\n    true as boolean,\n  )\n}\n\nexport function entryEquals(entry: any, filter?: IFilter): boolean {\n  if (entry === undefined && filter === undefined) {\n    return true\n  }\n  if (!filter && entry && !Object.keys(entry).length) {\n    return true\n  }\n  return (entry && filter && Object.keys({ ...filter, ...entry }).reduce(\n    (result, key) => {\n      // eslint-disable-next-line eqeqeq\n      if (typeof entry[key] === 'object' || typeof filter[key] === 'object') {\n        return result && entryEquals(entry[key], filter[key] as IFilter)\n      } else if (Array.isArray(entry[key]) || Array.isArray(filter[key])) {\n        return result && entry[key].length === ((filter as any)[key] as any[])?.length\n      } else {\n        // eslint-disable-next-line eqeqeq\n        return result && entry[key] == filter[key]\n      }\n    },\n    true as boolean,\n  )) || false\n}\n\nexport function entryDiff(entry: any, newEntry: any) {\n  if (/*entry instanceof File || newEntry instanceof File || */typeof newEntry === 'string' || typeof entry === 'number' || typeof newEntry === 'number' || typeof entry === 'boolean' || typeof newEntry === 'boolean') {\n    return entry !== newEntry ? newEntry : undefined\n  }\n  if (Array.isArray(entry) || Array.isArray(newEntry)) {\n    for (let i=0; i<Math.max(entry?.length || 0, newEntry?.length || 0); i++) {\n      if (entry?.[i] !== newEntry?.[i]) {\n        return newEntry\n      }\n    }\n    return undefined\n  }\n  const result: IEntryData = {}\n  Object.keys({ ...entry, ...newEntry }).forEach((key) => {\n    const tmp = entryDiff(entry[key], newEntry[key])\n    if (tmp !== undefined) {\n      result[key] = tmp\n    }\n  })\n  return result\n}\n","import React  from \"react\"\nimport { FC, memo } from \"react\"\n\nimport classes from './style.module.scss'\n\nexport interface IFieldWrapper {\n  name: string\n  label?: string\n  children: React.ReactNode\n}\n\nconst FieldWrapper: FC<IFieldWrapper> = ({ name, label, children }) => {\n  return (\n    <div className={classes.fieldContainer}>\n      {label && (\n        <label htmlFor={`field-${name}`} className={classes.label}>\n          {label}\n        </label>\n      )}\n      <div className={classes.field}>\n        {children}\n      </div>\n    </div>\n    \n  )\n}\n\nexport default memo(FieldWrapper)\n","import React, { useCallback, FC, memo } from 'react'\nimport classNames from 'classnames'\nimport Datetime from 'react-datetime'\nimport 'react-datetime/css/react-datetime.css'\nimport './style.scss'\n\nimport classes from '../Input/style.module.scss'\n\nimport type { IFieldProps } from '../'\nimport FieldWrapper from '../Wrapper'\n\nexport interface IDatetimeField extends IFieldProps {}\n\nconst DatetimeField: FC<IDatetimeField> = ({ \n  name,\n  type = 'datetime',\n  label,\n  value,\n  onChange,\n  readOnly = false,\n  dateFormat = type === 'time' ? false : 'YYYY/MM/DD',\n  timeFormat = type === 'date' ? false : 'HH:mm',\n  placeholder = `${dateFormat || ''} ${timeFormat || ''}`,\n}) => {\n\n  const handleChange = useCallback((value) => {\n    if (onChange) {\n      try {\n        // TODO: update sql data connector\n        //value = new Date(value).toISOString().substring(0,10)\n        value = new Date(value).toISOString().substring(0,10)\n      } catch {\n      }\n      onChange(name, value)\n    }\n  }, [onChange, name])\n  \n  return (\n    <FieldWrapper name={name} label={label}>\n      <Datetime\n        value={new Date(value)}\n        onChange={handleChange}\n        dateFormat={dateFormat}\n        timeFormat={timeFormat}\n        open={readOnly === true ? false : undefined}\n        inputProps={{ \n          className: classNames({ \n            [classes.input]: true,\n            [classes.readOnly]: readOnly,\n          }),\n          placeholder,\n          readOnly: readOnly as boolean,\n        }} \n      />\n    </FieldWrapper>\n  )\n}\n\nexport default memo(DatetimeField)","import React, { useCallback, FC, memo } from \"react\"\nimport classNames from 'classnames'\nimport { IFieldProps } from \"components/Field\"\nimport FieldWrapper from 'components/Field/Wrapper'\nimport classes from './style.module.scss'\n\nexport interface IInputField extends IFieldProps {}\n\nconst InputField: FC<IInputField> = ({ \n  name,\n  type = 'text',\n  label,\n  value,\n  placeholder,\n  onChange,\n  readOnly = false\n}) => {\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      let value: string | number | undefined = event.target.value\n      value = (value !== undefined && value !== \"\")\n        ? type === 'number'\n          ? Number(value)\n          : value\n        : undefined\n      onChange(name, value)\n    }\n  }, [name, onChange, type])\n\n  return (\n    <FieldWrapper name={name} label={label}>\n      <input\n        className={classNames({ \n          [classes.input]: true,\n          [classes.readOnly]: readOnly,\n        })}\n        id={`field-${name}`}\n        readOnly={readOnly}\n        name={name}\n        type={type}\n        value={value}\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </FieldWrapper>\n    \n    \n  )\n}\n\nexport default memo(InputField)","import React, { useCallback, FC, memo } from 'react'\nimport Select, { InputActionMeta } from 'react-select'\n\nimport { IFieldProps } from 'components/Field'\nimport FieldWrapper from 'components/Field/Wrapper'\n\nexport interface ISelectFieldOption {\n  value: string | number\n  label: string | number\n}\n  \nexport interface ISelectField extends IFieldProps {\n  options?: ISelectFieldOption[]\n  isMulti?: boolean\n  onSearch?: (value: string) => void\n}\n\nconst SelectField: FC<ISelectField> = ({ \n  name,\n  label,\n  placeholder,\n  value,\n  onChange,\n  options = [],\n  readOnly,\n  onSearch,\n  isMulti = false\n}) => {\n\n  const handleChange = useCallback((selected: ISelectFieldOption | ISelectFieldOption[]) => {\n    if (onChange) {\n      const value = typeof options[0]?.value === 'number' \n        ? Array.isArray(selected) ? selected.map(s => Number(s.value)) : selected && Number(selected.value)\n        : Array.isArray(selected) ? selected.map(s => s.value) : selected?.value\n      onChange(name, (value === null && isMulti) ? [] : value)\n    }\n  }, [name, onChange, options, isMulti])\n\n  const handleSearch = useCallback((newValue: string, actionMeta: InputActionMeta) => {\n    if (onSearch) {\n      onSearch(newValue)\n    }\n  }, [onSearch])\n\n  return (\n    <FieldWrapper name={name} label={label}>\n      <Select\n        onInputChange={handleSearch}\n        onChange={handleChange as any}\n        placeholder={placeholder}\n        name={name}\n        isMulti={isMulti}\n        value={isMulti \n          ? options.filter(o => value.includes(o.value))\n          : options.find(o => o.value === value)\n        }\n        isDisabled={readOnly}\n        options={options.map((o) => ({ \n          label: o.label || o.value,\n          value: o.value,\n        }))} \n      />\n    </FieldWrapper>\n  )\n}\n\nexport default memo(SelectField)","import React, { FC, memo } from 'react'\n\nimport style from './style.module.scss'\n\nexport interface IRenderFileProps {\n  url?: string\n  fileType?: 'image'\n}\n\nfunction getFileTypeFromUrl(url: string) {\n  switch(url.split('.').pop()?.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n    case 'png':\n    case 'gif':\n      return 'image'\n  }\n}\n\nconst RenderFile: FC<IRenderFileProps> = ({ url = '', fileType }) => {\n\n  switch(fileType || getFileTypeFromUrl(url)) {\n    case 'image':\n      return <img className={style.renderImage} alt=\"preview\" src={url} />\n    default:\n      return <div>{url}</div>\n  }\n}\n\nexport default memo(RenderFile)","import React, { useCallback, FC, memo } from \"react\"\nimport classNames from 'classnames'\nimport { IFieldProps } from \"components/Field\"\nimport FieldWrapper from 'components/Field/Wrapper'\nimport classes from './style.module.scss'\nimport RenderFile from \"./RenderFile\"\n\nexport interface IFileField extends IFieldProps {}\n\nconst FileField: FC<IFileField> = ({ \n  name,\n  label,\n  placeholder,\n  value,\n  onChange,\n  readOnly = false,\n}) => {\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(name, event.target?.files?.[0])\n    }\n  }, [name, onChange])\n\n  return (\n    <FieldWrapper name={name} label={label}>\n      {readOnly\n        ? <RenderFile url={value} />\n        : <input\n            className={classNames({ \n              [classes.input]: true,\n              [classes.readOnly]: readOnly,\n            })}\n            id={`field-${name}`}\n            name={name}\n            type=\"file\"\n            placeholder={placeholder}\n            onChange={handleChange}\n          />\n      }\n      \n    </FieldWrapper>\n  )\n}\n\nexport default memo(FileField)","import React, { FC, memo, useCallback, useState } from \"react\"\nimport { useEntity } from \"hooks/useEntity\"\nimport { useEntries } from \"hooks/useEntries\"\nimport Select, { ISelectField, ISelectFieldOption } from \"components/Field/Select\"\n\nexport interface IRelationSelectField extends ISelectField {\n  relationEntityName?: string\n}\n\nconst RelationSelectField: FC<IRelationSelectField> = (props) => {\n  \n  const isMulti = props.type === 'm:n' || props.type === 'n:m' || props.type === '1:n'\n\n  const [search, setSearch] = useState<string>()\n  const handleSearch = useCallback((newValue: string) => {\n    setSearch(newValue)\n  }, [])\n  \n  const entity = useEntity(props.relationEntityName)\n  const { entries } = useEntries({ entity, view: 'relation', search })\n  \n  const pk = entity?.getPk() || 'id'\n  const labelKey = entity?.getPropertyToBeUsedAsLabel() || 'name'\n\n  const filter = props.value ? {\n    [pk]: isMulti ? { _in: props.value } : props.value\n  } : {}\n\n  const { entries: selectedEntries } = useEntries({ \n    entity,\n    view: 'relation',\n    filter,\n    request: Object.keys(filter).length > 0,\n    take: 0\n  })\n  \n  const mergedEntries = [\n    ...entries,\n    ...selectedEntries,\n  ].filter((item, index, array) => {\n    return item[pk] && index === array.findIndex((arrayItem) => {\n      return arrayItem[pk] === item[pk]\n    })\n  })\n\n  return (\n    <Select\n      onSearch={handleSearch}\n      isMulti={isMulti}\n      options={mergedEntries.map((entry) => {\n        return {\n          label: entry[labelKey],\n          value: entry[pk],\n        } as ISelectFieldOption\n      })}\n      {...props} \n    /> \n  )\n}\n\nexport default memo(RelationSelectField)","import React, { useCallback, FC, memo } from 'react'\n\nimport { IFieldProps } from 'components/Field'\nimport FieldWrapper from 'components/Field/Wrapper'\n\nimport style from './style.module.scss'\n\nexport interface ISelectFieldOption {\n  value: string | number\n  label: string | number\n}\n  \nexport interface IToggleField extends IFieldProps {\n  options?: ISelectFieldOption[]\n  isMulti?: boolean\n}\n\nconst SelectField: FC<IToggleField> = ({ \n  name,\n  label,\n  value,\n  onChange,\n  readOnly,\n}) => {\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      const value = event.target.checked\n      onChange(name, value)\n    }\n  }, [name, onChange])\n\n  const handleToggle = useCallback(() => {\n    if (onChange) {\n      onChange(name, !value)\n    }\n  }, [onChange, value, name])\n\n  return (\n    <FieldWrapper name={name} label={label}>\n      <div className={style.toggleField} onClick={handleToggle}>\n        <input \n          type=\"checkbox\"\n          id={`field-${name}`}\n          name={name}\n          onChange={handleChange}\n          checked={!!value}\n        />\n        <div className={style.toggleIndicator}></div>\n      </div>\n    </FieldWrapper>\n  )\n}\n\nexport default memo(SelectField)","import Entity from 'services/entity'\nimport { \n  IFieldProps,\n  InputField,\n  SelectField,\n  FieldTypes,\n  RelationSelectField,\n  FileField,\n  DatetimeField,\n  ToggleField,\n} from 'components/Field'\n\nexport interface IMappedField {\n  Component: React.ComponentType<IFieldProps>\n  props: IFieldProps\n}\n\nexport function mapFieldComponents(entity?: Entity, view: 'new' | 'edit' | 'view' | 'filter' = 'view'): IMappedField[] {\n  return entity ? [\n    ...entity.getProperties(view),\n    ...entity.getMnRelations(),\n    ...entity.get1nRelations(),\n  ].map(\n    (propertyName: string) => {\n\n      const props: IFieldProps = {\n        name: propertyName,\n        label: entity.getPropertyLabel(propertyName),\n        readOnly: entity.isPropertyReadOnly(propertyName),\n        type: (\n          entity.getPropertyEditFieldType(propertyName) || \n          entity.getPropertyRelationType(propertyName) || \n          entity.getPropertyModelType(propertyName) ||\n          'text'\n        ) as FieldTypes,\n        ...(entity.getPropertyEditField(propertyName)),\n      }\n\n      switch (props.type) {\n        case 'boolean':\n        case 'toggle':\n          return {\n            Component: ToggleField,\n            props,\n          }\n        case '1:n':\n          console.log('1:n', propertyName, props)\n          return {\n            Component: RelationSelectField,\n            props: {\n              relationType: props.type,\n              relationEntityName: propertyName,\n              ...props, \n            }\n          }\n        case 'n:1':\n        case 'n:m':\n        case 'm:n':\n          return {\n            Component: RelationSelectField,\n            props: {\n              relationType: props.type,\n              relationEntityName: entity.getPropertyRelationEntityName(propertyName),\n              ...props, \n            }\n          }\n        case 'select':\n          return {\n            Component: SelectField,\n            props,\n          }\n        case 'file':\n          return {\n            Component: FileField,\n            props\n          }\n        case 'date':\n        case 'datetime':\n        case 'time':\n          return {\n            Component: DatetimeField,\n            props,\n          }\n        case 'text':\n        case 'number':\n        case 'password':\n        default:\n          return {\n            Component: InputField,\n            props,\n          }\n      }\n    }\n  ) : []\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"style_input__w9gXB\",\"readOnly\":\"style_readOnly__1h-3l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"style_input__t-6VG\",\"readOnly\":\"style_readOnly__17g9J\",\"renderImage\":\"style_renderImage__x3vv6\"};","import { IEntryData, IFilter } from './entry'\nimport Entity from './entity'\nimport graphql, { IFields, IGQuery } from './graphql'\n\nexport interface IGetEntriesArgs {\n  entity: Entity\n  filter?: IFilter\n  view?: Parameters<Entity['getProperties']>[0]\n  take?: number\n  skip?: number\n  search?: string\n  fields?: IFields\n}\n\nexport function parseFilter(entity: Entity, filter: IFilter, search?: string) {\n  const result: any = {}\n  Object.keys(filter).filter((key) => filter[key]).forEach((key) => {\n    const value = filter[key]\n    if (typeof value === 'string') {\n      result[key] = { _like: `%${value}%` }\n    } else if (Array.isArray(value)){\n      result[key] = { _in: value }\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      result[key] = { _eq: value }\n    } else {\n      result[key] = value\n    }\n  })\n  if (search) {\n    result[entity.getPropertyToBeUsedAsLabel()] = {\n      _like: `%${search}%`\n    }\n  }\n  return result\n}\n\nexport function countEntries({ entity, filter = {}, search }: IGetEntriesArgs): Promise<number> {\n\n  const query: IGQuery = {\n    operation: entity.getName() + 'Count',\n    args: {\n      filter: parseFilter(entity, filter, search),\n    },\n  }\n  return graphql.query(query).then((data: any) => {\n    if (data) {\n      return data\n    }\n  })\n}\n\nexport function deleteEntries(entity: Entity, filter: IFilter) {\n  const entityName = entity.getName()\n\n  const query = {\n    operation: `delete${entityName[0].toUpperCase() + entityName.substr(1)}`,\n    args: {\n      filter: parseFilter(entity, filter),\n    },\n    fields: ['deleted'],\n  }\n  return graphql.mutation(query).then((data: any) => {\n    if (data) {\n      return data\n    }\n  })\n}\n\nexport function getEntries({\n  entity,\n  filter = {},\n  view = 'list',\n  take = 10,\n  skip = 0,\n  search,\n  fields,\n}: IGetEntriesArgs): Promise<IEntryData[]> {\n  \n  const query: IGQuery = {\n    operation: entity.getName(),\n    fields: fields || entity.getProperties(view) || Object.keys(filter),\n    args: {\n      filter: parseFilter(entity, filter, search),\n      take,\n      skip,\n    },\n  }\n\n  return graphql.query(query).then((data: any) => {\n    if (data) {\n      return data\n    }\n  })\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport Entity from '../services/entity'\nimport { countEntries, getEntries, deleteEntries } from '../services/entries'\nimport { entryEquals, IEntryData, IFilter } from '../services/entry'\nimport { IFields } from '../services/graphql'\n\nexport interface IUseEntriesArgs {\n  entity?: Entity\n  filter?: IFilter\n  view?: Parameters<Entity['getProperties']>[0]\n  skip?: number\n  take?: number\n  request?: boolean\n  search?: string\n  fields?: IFields\n}\nexport interface IUseEntriesRet {\n  entries: IEntryData[]\n  error?: boolean\n  loading?: boolean\n  total: number\n  deleteEntry: (pk: number | string) => void\n  reload: () => void\n}\n\n/* Return list of entries for one entity based on a filter */\nexport function useEntries({\n  entity,\n  filter = {},\n  view = 'list',\n  skip = 0,\n  take = 10,\n  request = true,\n  search,\n  fields,\n}: IUseEntriesArgs): IUseEntriesRet {\n  \n  const [entries, setEntries] = useState<IEntryData[]>([])\n  const [total, setTotal] = useState(0)\n\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n\n  const [oldArgs, setNewArgs] = useState<{ entity?: string, filter?: IFilter, skip?: number, take?: number, search?: string, fields?: IFields }>({})\n  \n  const fetchEntries = useCallback(() => {\n    if (!entity || !request) return\n    setLoading(true)\n    return Promise.all([\n      getEntries({ entity, filter, skip, take, view, search, fields }),\n      countEntries({ entity, filter }),\n    ]).then(([data, total]) => {\n      setLoading(false)\n      if (data) {\n        setEntries(data)\n        setTotal(total)\n      } else {\n        setError(true)\n      }\n    }).catch(() => {\n      setLoading(false)\n      setError(true)\n    })\n  }, [entity, filter, skip, view, take, request, search, fields])\n\n  const deleteEntry = useCallback((pk: string | number) => {\n    if (entity) {\n      return deleteEntries(entity, {\n        [entity?.getPk() || 'id']: pk,\n      }).then(fetchEntries)\n    }\n  }, [entity, fetchEntries])\n\n  const hasNewArgs = useCallback(() => {\n    if (\n      entity?.getName() !== oldArgs.entity ||\n      !entryEquals(oldArgs.filter, filter) ||\n      skip !== oldArgs.skip ||\n      take !== oldArgs.take ||\n      (search || \"\") !== (oldArgs.search || \"\")\n    ) {\n      setNewArgs({ entity: entity?.getName(), filter: { ...filter }, skip, take })\n      return true\n    }\n    return false\n  }, [entity, oldArgs, filter, skip, take, search])\n  useEffect(() => {\n    if (hasNewArgs() && !loading && !error) {\n      fetchEntries()\n    } \n  }, [loading, error, hasNewArgs, fetchEntries, filter, request])\n\n  return {\n    entries,\n    error,\n    loading,\n    total,\n    deleteEntry,\n    reload: fetchEntries,\n  }\n}","import graphql from './graphql'\nimport { friendlyName } from '../utils'\nimport { IEntity } from '../utils/funfunzTypings'\n\nexport default class Entity {\n  private static entities: Record<string, Entity> = {}\n  private static loading: Record<string, boolean> = {}\n  private static errors: Record<string, boolean> = {}\n  private entity: IEntity\n  constructor(entity: IEntity) {\n    this.entity = entity\n  }\n  getName() {\n    return this.entity.name\n  }\n  getPk() {\n    return this.entity.properties?.find(p => p.isPk)?.name || 'id'\n  }\n  getLabel() {\n    return this.entity.backoffice?.label || this.entity.name\n  }\n  \n  getProperties(view: 'view' | 'new' |'list' | 'edit' | 'relation' | 'filter' | 'all' = 'list') {\n    if (view === 'all') {\n      return this.entity.properties?.map(p => p.name) || []\n    }\n    return this.entity.properties?.filter(p => {\n      switch (view) {\n      case 'relation':\n        return p.isPk || p.backoffice?.visible?.relation !== false\n      case 'view':\n        return p.isPk || p.backoffice?.visible?.detail !== false\n      case 'new':\n      case 'edit':\n        return !this.isPropertyReadOnly(p.name) || \n          (p.backoffice?.visible?.detail !== undefined ? p.backoffice?.visible?.detail : true)\n      case 'list':\n      case 'filter':\n      default:\n        return p.backoffice?.visible?.entityPage !== false\n      }\n    }).map(p => p.name) || []\n  }\n  getMnRelations() {\n    return this.entity.relations?.filter((relation) => {\n      return relation.type === 'm:n' || relation.type === 'n:m'\n    }).map((relation) => {\n      return relation.remoteEntity\n    }) || []\n  }\n  get1nRelations() {\n    return this.entity.relations?.filter((relation) => {\n      return relation.type === '1:n'\n    }).map((relation) => {\n      return relation.remoteEntity\n    }) || []\n  }\n  getPropertyToBeUsedAsLabel() {\n    return this.entity.properties?.find(p => p.backoffice?.visible?.relation)?.name || \n    this.getPropertyByName('name')?.name  ||\n    this.getPk()\n  }\n  private getPropertyByName(propertyName: string) {\n    return this.entity.properties?.find(p => p.name === propertyName)\n  }\n  isPropertyReadOnly(propertyName: string) {\n    const property = this.getPropertyByName(propertyName)\n    return this.getPk() === propertyName || property?.readOnly\n  }\n  getPropertyModelType(propertyName: string) {\n    const property = this.getPropertyByName(propertyName)\n    return property?.type || 'text'\n  }\n  private getPropertyRelation(propertyName: string) {\n    return this.entity.relations?.find((relation) => {\n      return relation.foreignKey === propertyName || \n        relation.remoteEntity === propertyName\n    })\n  }\n  getPropertyRelationType(propertyName: string) {\n    const relation = this.getPropertyRelation(propertyName)\n    return relation?.type\n  }\n  getPropertyRelationEntityName(propertyName: string) {\n    const relation = this.getPropertyRelation(propertyName)\n    return relation?.remoteEntity\n  }\n  getPropertyEditField(propertyName: string): Record<string, string|number|boolean> {\n    const property = this.getPropertyByName(propertyName)\n    return property?.backoffice?.editField || {}\n  }\n  getPropertyEditFieldType(propertyName: string) {\n    const editField = this.getPropertyEditField(propertyName)\n    return editField.type\n  }\n  getPropertyLabel(propertyName: string) {\n    const property = this.getPropertyByName(propertyName)\n    return property?.backoffice?.label || friendlyName(property?.name || propertyName)\n  }\n  static isError(entityName: string) {\n    return Entity.errors[entityName] ? true : false\n  }\n  static isLoading(entityName: string) {\n    return Entity.loading[entityName] || false\n  }\n  static getEntity(entityName: string) {\n    return Entity.entities[entityName]\n  }\n  static async fetchEntity(entityName: string) {\n    if (Entity.entities[entityName]) {\n      return Entity.entities[entityName]\n    }\n    Entity.loading[entityName] = true\n    const config = await graphql.query({\n      operation: 'config',\n      fields: [entityName],\n    })\n    if (config[entityName]) {\n      Entity.entities[entityName] = new Entity(config[entityName])\n      Entity.loading[entityName] = false\n      Entity.errors[entityName] = false\n      return Entity.entities[entityName]\n    } else {\n      Entity.loading[entityName] = false\n      Entity.errors[entityName] = true\n      throw new Error(`Entity ${entityName} not found`)\n    }\n  }\n}\n","\nexport function delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const desktopSize = 1120\n\nexport function friendlyName(name: string) {\n  let result = ''\n  for(const letter of name) {\n    if (letter.toUpperCase() === letter) {\n      result += ` ${letter}`\n    } else if (result === '') {\n      result += letter.toUpperCase()\n    } else {\n      result += letter\n    }\n  }\n  return result\n}"],"sourceRoot":""}